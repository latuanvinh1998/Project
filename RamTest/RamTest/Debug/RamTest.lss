
RamTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000890  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e9  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	3d d0       	rcall	.+122    	; 0xae <main>
  34:	55 c0       	rjmp	.+170    	; 0xe0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z6enablev>:
 */ 
#include "Ram.h"

void enable()
{
	PORTB &= ~(1<<SS);
  38:	c2 98       	cbi	0x18, 2	; 24
  3a:	08 95       	ret

0000003c <_Z7disablev>:
}


void disable()
{
	PORTB |= (1<<SS);
  3c:	c2 9a       	sbi	0x18, 2	; 24
  3e:	08 95       	ret

00000040 <_Z4Initv>:
}


void Init()
{
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);				/* Set MOSI and SCK output, all others input */											/* define reset pin as a output */
  40:	8c e2       	ldi	r24, 0x2C	; 44
  42:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);												/* define MISO pin as a input */
  44:	bc 98       	cbi	0x17, 4	; 23
	PORTB |= (1<<SS);												/* Make SS pin as a output */
  46:	c2 9a       	sbi	0x18, 2	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);							/* Enable SPE, MSTR and SPR0 bit in SPI control register */
  48:	81 e5       	ldi	r24, 0x51	; 81
  4a:	8d b9       	out	0x0d, r24	; 13
  4c:	08 95       	ret

0000004e <_Z8SPI_Readv>:
}


char SPI_Read()
{
	SPDR = 0xFF;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
  52:	77 9b       	sbis	0x0e, 7	; 14
  54:	fe cf       	rjmp	.-4      	; 0x52 <_Z8SPI_Readv+0x4>
	return(SPDR);													/* Return the SPDR value */
  56:	8f b1       	in	r24, 0x0f	; 15
}
  58:	08 95       	ret

0000005a <_Z9SPI_Writec>:


void SPI_Write(char write_data)
{
	SPDR = write_data;
  5a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
  5c:	77 9b       	sbis	0x0e, 7	; 14
  5e:	fe cf       	rjmp	.-4      	; 0x5c <_Z9SPI_Writec+0x2>
}
  60:	08 95       	ret

00000062 <_Z12ReadDataBytej>:


uint8_t ReadDataByte(uint16_t address)
{
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	c8 2f       	mov	r28, r24
  68:	d9 2f       	mov	r29, r25
	uint8_t data;
	enable();
  6a:	e6 df       	rcall	.-52     	; 0x38 <_Z6enablev>
	SPI_Write(READ);
  6c:	83 e0       	ldi	r24, 0x03	; 3
  6e:	f5 df       	rcall	.-22     	; 0x5a <_Z9SPI_Writec>
	SPI_Write(address>>8);
  70:	8d 2f       	mov	r24, r29
  72:	f3 df       	rcall	.-26     	; 0x5a <_Z9SPI_Writec>
	SPI_Write(address);
  74:	8c 2f       	mov	r24, r28
  76:	f1 df       	rcall	.-30     	; 0x5a <_Z9SPI_Writec>
	data = SPI_Read();
  78:	ea df       	rcall	.-44     	; 0x4e <_Z8SPI_Readv>
  7a:	c8 2f       	mov	r28, r24
	disable();
  7c:	df df       	rcall	.-66     	; 0x3c <_Z7disablev>
	return data;
}
  7e:	8c 2f       	mov	r24, r28
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	08 95       	ret

00000086 <_Z13WriteDataBytejh>:


void WriteDataByte(uint16_t address, uint8_t data)
{
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	d8 2f       	mov	r29, r24
  8e:	19 2f       	mov	r17, r25
  90:	c6 2f       	mov	r28, r22
	enable();
  92:	d2 df       	rcall	.-92     	; 0x38 <_Z6enablev>
	SPI_Write(WRITE);
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	e1 df       	rcall	.-62     	; 0x5a <_Z9SPI_Writec>
	SPI_Write(address>>8);
  98:	81 2f       	mov	r24, r17
  9a:	df df       	rcall	.-66     	; 0x5a <_Z9SPI_Writec>
	SPI_Write(address);
  9c:	8d 2f       	mov	r24, r29
  9e:	dd df       	rcall	.-70     	; 0x5a <_Z9SPI_Writec>
	SPI_Write(data);
  a0:	8c 2f       	mov	r24, r28
  a2:	db df       	rcall	.-74     	; 0x5a <_Z9SPI_Writec>
	disable();
  a4:	cb df       	rcall	.-106    	; 0x3c <_Z7disablev>
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	1f 91       	pop	r17
  ac:	08 95       	ret

000000ae <main>:
#include "Ram.h"

int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  b2:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	87 ea       	ldi	r24, 0xA7	; 167
  b6:	91 e6       	ldi	r25, 0x61	; 97
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x10>
  be:	00 00       	nop
	_delay_ms(100);
	Init();
  c0:	bf df       	rcall	.-130    	; 0x40 <_Z4Initv>
	WriteDataByte(0x0F0F, 0x0F);
  c2:	6f e0       	ldi	r22, 0x0F	; 15
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	de df       	rcall	.-68     	; 0x86 <_Z13WriteDataBytejh>
  ca:	83 ec       	ldi	r24, 0xC3	; 195
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x20>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x26>
  d4:	00 00       	nop
	_delay_ms(10);
	PORTD = ReadDataByte(0x0F0F);
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	9f e0       	ldi	r25, 0x0F	; 15
  da:	c3 df       	rcall	.-122    	; 0x62 <_Z12ReadDataBytej>
  dc:	82 bb       	out	0x12, r24	; 18
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x30>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
