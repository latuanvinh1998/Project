
RamTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b92  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fd  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a9  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	57 d0       	rcall	.+174    	; 0xf2 <main>
  44:	6f c0       	rjmp	.+222    	; 0x124 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z6enablev>:

uint8_t _current_mode;

void enable()
{
	PORTB &= ~(1<<SS);
  48:	c2 98       	cbi	0x18, 2	; 24
  4a:	08 95       	ret

0000004c <_Z7disablev>:
}


void disable()
{
	PORTB |= (1<<SS);
  4c:	c2 9a       	sbi	0x18, 2	; 24
  4e:	08 95       	ret

00000050 <_Z4Initv>:
}


void Init()
{
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);				/* Set MOSI and SCK output, all others input */											/* define reset pin as a output */
  50:	8c e2       	ldi	r24, 0x2C	; 44
  52:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);												/* define MISO pin as a input */
  54:	bc 98       	cbi	0x17, 4	; 23
	PORTB |= (1<<SS);												/* Make SS pin as a output */
  56:	c2 9a       	sbi	0x18, 2	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);							/* Enable SPE, MSTR and SPR0 bit in SPI control register */
  58:	81 e5       	ldi	r24, 0x51	; 81
  5a:	8d b9       	out	0x0d, r24	; 13
	_current_mode = UNDEFINED_MODE;
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  62:	08 95       	ret

00000064 <_Z8SPI_Readv>:
}


char SPI_Read()
{
	SPDR = 0xFF;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
  68:	77 9b       	sbis	0x0e, 7	; 14
  6a:	fe cf       	rjmp	.-4      	; 0x68 <_Z8SPI_Readv+0x4>
	return(SPDR);													/* Return the SPDR value */
  6c:	8f b1       	in	r24, 0x0f	; 15
}
  6e:	08 95       	ret

00000070 <_Z9SPI_Writec>:


void SPI_Write(char write_data)
{
	SPDR = write_data;
  70:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
  72:	77 9b       	sbis	0x0e, 7	; 14
  74:	fe cf       	rjmp	.-4      	; 0x72 <_Z9SPI_Writec+0x2>
}
  76:	08 95       	ret

00000078 <_Z7SetModeh>:
		SPI_Write(buffer[i]);
	disable();
}

void SetMode(uint8_t mode)
{
  78:	cf 93       	push	r28
	if(mode != _current_mode)
  7a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  7e:	98 17       	cp	r25, r24
  80:	71 f0       	breq	.+28     	; 0x9e <_Z7SetModeh+0x26>
  82:	c8 2f       	mov	r28, r24
	{
		enable();
  84:	e1 df       	rcall	.-62     	; 0x48 <_Z6enablev>
		SPI_Write(WRSR);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	f3 df       	rcall	.-26     	; 0x70 <_Z9SPI_Writec>
		SPI_Write(mode);
  8a:	8c 2f       	mov	r24, r28
  8c:	f1 df       	rcall	.-30     	; 0x70 <_Z9SPI_Writec>
		disable();
  8e:	de df       	rcall	.-68     	; 0x4c <_Z7disablev>
		enable();
  90:	db df       	rcall	.-74     	; 0x48 <_Z6enablev>
		SPI_Write(RDSR);
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	ed df       	rcall	.-38     	; 0x70 <_Z9SPI_Writec>
		_current_mode = SPI_Read();
  96:	e6 df       	rcall	.-52     	; 0x64 <_Z8SPI_Readv>
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		disable();
  9c:	d7 df       	rcall	.-82     	; 0x4c <_Z7disablev>
	}
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <_Z5SetUphhj>:

void SetUp(uint8_t mode, uint8_t action, uint16_t address)
{
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	16 2f       	mov	r17, r22
  aa:	c4 2f       	mov	r28, r20
  ac:	d5 2f       	mov	r29, r21
	SetMode(mode);
  ae:	e4 df       	rcall	.-56     	; 0x78 <_Z7SetModeh>
	enable();
  b0:	cb df       	rcall	.-106    	; 0x48 <_Z6enablev>
	SPI_Write(action);
  b2:	81 2f       	mov	r24, r17
  b4:	dd df       	rcall	.-70     	; 0x70 <_Z9SPI_Writec>
	SPI_Write(address>>8);
  b6:	8d 2f       	mov	r24, r29
  b8:	db df       	rcall	.-74     	; 0x70 <_Z9SPI_Writec>
	SPI_Write(address);
  ba:	8c 2f       	mov	r24, r28
  bc:	d9 df       	rcall	.-78     	; 0x70 <_Z9SPI_Writec>
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	1f 91       	pop	r17
  c4:	08 95       	ret

000000c6 <_Z12ReadDataBytej>:
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
}


uint8_t ReadDataByte(uint16_t address)
{
  c6:	cf 93       	push	r28
	uint8_t data;
	SetUp(BYTE_MODE, READ, address);
  c8:	ac 01       	movw	r20, r24
  ca:	63 e0       	ldi	r22, 0x03	; 3
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	e9 df       	rcall	.-46     	; 0xa2 <_Z5SetUphhj>
	data = SPI_Read();
  d0:	c9 df       	rcall	.-110    	; 0x64 <_Z8SPI_Readv>
  d2:	c8 2f       	mov	r28, r24
	disable();
  d4:	bb df       	rcall	.-138    	; 0x4c <_Z7disablev>
	return data;
}
  d6:	8c 2f       	mov	r24, r28
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <_Z13WriteDataBytejc>:


void WriteDataByte(uint16_t address, char data)
{
  dc:	cf 93       	push	r28
  de:	c6 2f       	mov	r28, r22
	SetUp(BYTE_MODE, WRITE, address);
  e0:	ac 01       	movw	r20, r24
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	dd df       	rcall	.-70     	; 0xa2 <_Z5SetUphhj>
	SPI_Write(data);
  e8:	8c 2f       	mov	r24, r28
  ea:	c2 df       	rcall	.-124    	; 0x70 <_Z9SPI_Writec>
	disable();
  ec:	af df       	rcall	.-162    	; 0x4c <_Z7disablev>
}
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <main>:
#include "Ram.h"

int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  f6:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	87 ea       	ldi	r24, 0xA7	; 167
  fa:	91 e6       	ldi	r25, 0x61	; 97
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x10>
 102:	00 00       	nop
	_delay_ms(100);
	Init();
 104:	a5 df       	rcall	.-182    	; 0x50 <_Z4Initv>
	WriteDataByte(0x0F0F, 'c');
 106:	63 e6       	ldi	r22, 0x63	; 99
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	9f e0       	ldi	r25, 0x0F	; 15
 10c:	e7 df       	rcall	.-50     	; 0xdc <_Z13WriteDataBytejc>
 10e:	83 ec       	ldi	r24, 0xC3	; 195
 110:	99 e0       	ldi	r25, 0x09	; 9
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x26>
 118:	00 00       	nop
	_delay_ms(10);
	PORTD = ReadDataByte(0x0F0F);
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	d3 df       	rcall	.-90     	; 0xc6 <_Z12ReadDataBytej>
 120:	82 bb       	out	0x12, r24	; 18
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x30>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
