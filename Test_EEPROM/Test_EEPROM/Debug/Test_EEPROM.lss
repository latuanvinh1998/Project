
Test_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071d  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c7  00000000  00000000  00000929  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000468  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000165  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	4f d0       	rcall	.+158    	; 0xd2 <main>
  34:	6c c0       	rjmp	.+216    	; 0x10e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z6EEOpenv>:
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
  38:	85 e0       	ldi	r24, 0x05	; 5
  3a:	80 b9       	out	0x00, r24	; 0
  3c:	81 b1       	in	r24, 0x01	; 1
  3e:	8c 7f       	andi	r24, 0xFC	; 252
  40:	81 b9       	out	0x01, r24	; 1
  42:	08 95       	ret

00000044 <_Z11EEWriteBytejh>:
  44:	34 ea       	ldi	r19, 0xA4	; 164
  46:	50 ea       	ldi	r21, 0xA0	; 160
  48:	44 e8       	ldi	r20, 0x84	; 132
  4a:	36 bf       	out	0x36, r19	; 54
  4c:	06 b6       	in	r0, 0x36	; 54
  4e:	07 fe       	sbrs	r0, 7
  50:	fd cf       	rjmp	.-6      	; 0x4c <_Z11EEWriteBytejh+0x8>
  52:	21 b1       	in	r18, 0x01	; 1
  54:	28 7f       	andi	r18, 0xF8	; 248
  56:	28 30       	cpi	r18, 0x08	; 8
  58:	a1 f5       	brne	.+104    	; 0xc2 <_Z11EEWriteBytejh+0x7e>
  5a:	53 b9       	out	0x03, r21	; 3
  5c:	46 bf       	out	0x36, r20	; 54
  5e:	06 b6       	in	r0, 0x36	; 54
  60:	07 fe       	sbrs	r0, 7
  62:	fd cf       	rjmp	.-6      	; 0x5e <_Z11EEWriteBytejh+0x1a>
  64:	21 b1       	in	r18, 0x01	; 1
  66:	28 7f       	andi	r18, 0xF8	; 248
  68:	28 31       	cpi	r18, 0x18	; 24
  6a:	79 f7       	brne	.-34     	; 0x4a <_Z11EEWriteBytejh+0x6>
  6c:	93 b9       	out	0x03, r25	; 3
  6e:	94 e8       	ldi	r25, 0x84	; 132
  70:	96 bf       	out	0x36, r25	; 54
  72:	06 b6       	in	r0, 0x36	; 54
  74:	07 fe       	sbrs	r0, 7
  76:	fd cf       	rjmp	.-6      	; 0x72 <_Z11EEWriteBytejh+0x2e>
  78:	91 b1       	in	r25, 0x01	; 1
  7a:	98 7f       	andi	r25, 0xF8	; 248
  7c:	98 32       	cpi	r25, 0x28	; 40
  7e:	19 f5       	brne	.+70     	; 0xc6 <_Z11EEWriteBytejh+0x82>
  80:	83 b9       	out	0x03, r24	; 3
  82:	84 e8       	ldi	r24, 0x84	; 132
  84:	86 bf       	out	0x36, r24	; 54
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <_Z11EEWriteBytejh+0x42>
  8c:	81 b1       	in	r24, 0x01	; 1
  8e:	88 7f       	andi	r24, 0xF8	; 248
  90:	88 32       	cpi	r24, 0x28	; 40
  92:	d9 f4       	brne	.+54     	; 0xca <_Z11EEWriteBytejh+0x86>
  94:	63 b9       	out	0x03, r22	; 3
  96:	84 e8       	ldi	r24, 0x84	; 132
  98:	86 bf       	out	0x36, r24	; 54
  9a:	06 b6       	in	r0, 0x36	; 54
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <_Z11EEWriteBytejh+0x56>
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	88 7f       	andi	r24, 0xF8	; 248
  a4:	88 32       	cpi	r24, 0x28	; 40
  a6:	99 f4       	brne	.+38     	; 0xce <_Z11EEWriteBytejh+0x8a>
  a8:	84 e9       	ldi	r24, 0x94	; 148
  aa:	86 bf       	out	0x36, r24	; 54
  ac:	06 b6       	in	r0, 0x36	; 54
  ae:	04 fc       	sbrc	r0, 4
  b0:	fd cf       	rjmp	.-6      	; 0xac <_Z11EEWriteBytejh+0x68>
  b2:	87 eb       	ldi	r24, 0xB7	; 183
  b4:	9b e0       	ldi	r25, 0x0B	; 11
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_Z11EEWriteBytejh+0x72>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_Z11EEWriteBytejh+0x78>
  bc:	00 00       	nop
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	08 95       	ret
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret

000000d2 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRD = 0XFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	81 bb       	out	0x11, r24	; 17
	EEOpen();
  d6:	b0 df       	rcall	.-160    	; 0x38 <_Z6EEOpenv>
    /* Replace with your application code */
	EEWriteByte(0x00FF, 255);
  d8:	6f ef       	ldi	r22, 0xFF	; 255
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	b2 df       	rcall	.-156    	; 0x44 <_Z11EEWriteBytejh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	87 ea       	ldi	r24, 0xA7	; 167
  e2:	91 e6       	ldi	r25, 0x61	; 97
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x18>
  ea:	00 00       	nop
	_delay_ms(100);
    while (1) 
	{
			DDRC = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
			PORTC = 0x00;
  f0:	15 ba       	out	0x15, r1	; 21
  f2:	e7 ea       	ldi	r30, 0xA7	; 167
  f4:	f1 e6       	ldi	r31, 0x61	; 97
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x2a>
  fc:	00 00       	nop
			_delay_ms(100);
			PORTC = 0xFF;
  fe:	85 bb       	out	0x15, r24	; 21
 100:	e7 ea       	ldi	r30, 0xA7	; 167
 102:	f1 e6       	ldi	r31, 0x61	; 97
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x32>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x38>
 10a:	00 00       	nop
 10c:	f0 cf       	rjmp	.-32     	; 0xee <main+0x1c>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
