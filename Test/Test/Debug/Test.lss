
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000650  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c8  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000293  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0e d0       	rcall	.+28     	; 0x50 <main>
  34:	1a c0       	rjmp	.+52     	; 0x6a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z10USART_Initv>:
	register int i = 0;
	while (data[i]){
		USART_Transmit(data[i]);
		i++;
	}
}
  38:	10 bc       	out	0x20, r1	; 32
  3a:	83 e3       	ldi	r24, 0x33	; 51
  3c:	89 b9       	out	0x09, r24	; 9
  3e:	80 b5       	in	r24, 0x20	; 32
  40:	86 68       	ori	r24, 0x86	; 134
  42:	80 bd       	out	0x20, r24	; 32
  44:	53 9a       	sbi	0x0a, 3	; 10
  46:	08 95       	ret

00000048 <_Z14USART_Transmitc>:
  48:	5d 9b       	sbis	0x0b, 5	; 11
  4a:	fe cf       	rjmp	.-4      	; 0x48 <_Z14USART_Transmitc>
  4c:	8c b9       	out	0x0c, r24	; 12
  4e:	08 95       	ret

00000050 <main>:
int main(void)
{
	USART_Init();
  50:	f3 df       	rcall	.-26     	; 0x38 <_Z10USART_Initv>
	while(1)
	{
		USART_Transmit('a');
  52:	81 e6       	ldi	r24, 0x61	; 97
  54:	f9 df       	rcall	.-14     	; 0x48 <_Z14USART_Transmitc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	80 e7       	ldi	r24, 0x70	; 112
  5a:	92 e0       	ldi	r25, 0x02	; 2
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	80 40       	sbci	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <main+0xc>
  64:	00 c0       	rjmp	.+0      	; 0x66 <main+0x16>
  66:	00 00       	nop
  68:	f4 cf       	rjmp	.-24     	; 0x52 <main+0x2>

0000006a <_exit>:
  6a:	f8 94       	cli

0000006c <__stop_program>:
  6c:	ff cf       	rjmp	.-2      	; 0x6c <__stop_program>
