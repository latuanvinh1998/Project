
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092a  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000447  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e1       	ldi	r30, 0x12	; 18
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	87 d0       	rcall	.+270    	; 0x168 <main>
  5a:	d9 c1       	rjmp	.+946    	; 0x40e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z10USART_Initv>:
	register int i = 0;
	while (data[i]){
		USART_Transmit(data[i]);
		i++;
	}
}
  5e:	10 bc       	out	0x20, r1	; 32
  60:	83 e3       	ldi	r24, 0x33	; 51
  62:	89 b9       	out	0x09, r24	; 9
  64:	80 b5       	in	r24, 0x20	; 32
  66:	86 68       	ori	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
  6a:	53 9a       	sbi	0x0a, 3	; 10
  6c:	08 95       	ret

0000006e <_Z14USART_Transmitc>:
  6e:	5d 9b       	sbis	0x0b, 5	; 11
  70:	fe cf       	rjmp	.-4      	; 0x6e <_Z14USART_Transmitc>
  72:	8c b9       	out	0x0c, r24	; 12
  74:	08 95       	ret

00000076 <_Z10CreateNodeci>:
};
typedef struct node NODE;


NODE* CreateNode(char data, int amount)
{
  76:	1f 93       	push	r17
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	18 2f       	mov	r17, r24
  7e:	eb 01       	movw	r28, r22
	NODE *n = (NODE*) malloc(sizeof(struct node));
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	a3 d0       	rcall	.+326    	; 0x1cc <malloc>
// 	if(n == NULL)
// 		return NULL;
	n->data = data;
  86:	fc 01       	movw	r30, r24
  88:	10 83       	st	Z, r17
	n->amount = amount;
  8a:	d2 83       	std	Z+2, r29	; 0x02
  8c:	c1 83       	std	Z+1, r28	; 0x01
	for (int i = 0; i < n->amount; i++)
  8e:	1c 16       	cp	r1, r28
  90:	1d 06       	cpc	r1, r29
  92:	6c f4       	brge	.+26     	; 0xae <_Z10CreateNodeci+0x38>
  94:	33 96       	adiw	r30, 0x03	; 3
  96:	be 01       	movw	r22, r28
  98:	66 0f       	add	r22, r22
  9a:	77 1f       	adc	r23, r23
  9c:	6d 5f       	subi	r22, 0xFD	; 253
  9e:	7f 4f       	sbci	r23, 0xFF	; 255
  a0:	68 0f       	add	r22, r24
  a2:	79 1f       	adc	r23, r25
		n->next[i] = NULL;
  a4:	11 92       	st	Z+, r1
  a6:	11 92       	st	Z+, r1
	NODE *n = (NODE*) malloc(sizeof(struct node));
// 	if(n == NULL)
// 		return NULL;
	n->data = data;
	n->amount = amount;
	for (int i = 0; i < n->amount; i++)
  a8:	e6 17       	cp	r30, r22
  aa:	f7 07       	cpc	r31, r23
  ac:	d9 f7       	brne	.-10     	; 0xa4 <_Z10CreateNodeci+0x2e>
		n->next[i] = NULL;
	return n;
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	08 95       	ret

000000b6 <_Z10InsertNodeRP4nodeciPii>:

void InsertNode(NODE*& root, char x, int y, int *array, int length)
{
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	7c 01       	movw	r14, r24
  c4:	86 2f       	mov	r24, r22
	if (root == NULL)
  c6:	f7 01       	movw	r30, r14
  c8:	c0 81       	ld	r28, Z
  ca:	d1 81       	ldd	r29, Z+1	; 0x01
  cc:	20 97       	sbiw	r28, 0x00	; 0
  ce:	21 f0       	breq	.+8      	; 0xd8 <_Z10InsertNodeRP4nodeciPii+0x22>
		root = CreateNode(x, y);
		return;
	}
	NODE* p = root;
	int i;
	for(i = 1 ; i < length; i++)
  d0:	02 30       	cpi	r16, 0x02	; 2
  d2:	11 05       	cpc	r17, r1
  d4:	3c f4       	brge	.+14     	; 0xe4 <_Z10InsertNodeRP4nodeciPii+0x2e>
  d6:	19 c0       	rjmp	.+50     	; 0x10a <_Z10InsertNodeRP4nodeciPii+0x54>

void InsertNode(NODE*& root, char x, int y, int *array, int length)
{
	if (root == NULL)
	{
		root = CreateNode(x, y);
  d8:	ba 01       	movw	r22, r20
  da:	cd df       	rcall	.-102    	; 0x76 <_Z10CreateNodeci>
  dc:	f7 01       	movw	r30, r14
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	80 83       	st	Z, r24
		return;
  e2:	27 c0       	rjmp	.+78     	; 0x132 <_Z10InsertNodeRP4nodeciPii+0x7c>
  e4:	d9 01       	movw	r26, r18
  e6:	12 96       	adiw	r26, 0x02	; 2
  e8:	78 01       	movw	r14, r16
  ea:	ee 0c       	add	r14, r14
  ec:	ff 1c       	adc	r15, r15
  ee:	e2 0e       	add	r14, r18
  f0:	f3 1e       	adc	r15, r19
	}
	NODE* p = root;
	int i;
	for(i = 1 ; i < length; i++)
		p = p->next[array[i]];
  f2:	ed 91       	ld	r30, X+
  f4:	fd 91       	ld	r31, X+
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ec 0f       	add	r30, r28
  fc:	fd 1f       	adc	r31, r29
  fe:	c3 81       	ldd	r28, Z+3	; 0x03
 100:	d4 81       	ldd	r29, Z+4	; 0x04
		root = CreateNode(x, y);
		return;
	}
	NODE* p = root;
	int i;
	for(i = 1 ; i < length; i++)
 102:	ae 15       	cp	r26, r14
 104:	bf 05       	cpc	r27, r15
 106:	a9 f7       	brne	.-22     	; 0xf2 <_Z10InsertNodeRP4nodeciPii+0x3c>
 108:	02 c0       	rjmp	.+4      	; 0x10e <_Z10InsertNodeRP4nodeciPii+0x58>
 10a:	01 e0       	ldi	r16, 0x01	; 1
 10c:	10 e0       	ldi	r17, 0x00	; 0
		p = p->next[array[i]];
	p->next[array[i - 1]] = CreateNode(x, y);
 10e:	01 50       	subi	r16, 0x01	; 1
 110:	10 48       	sbci	r17, 0x80	; 128
 112:	00 0f       	add	r16, r16
 114:	11 1f       	adc	r17, r17
 116:	f9 01       	movw	r30, r18
 118:	e0 0f       	add	r30, r16
 11a:	f1 1f       	adc	r31, r17
 11c:	00 81       	ld	r16, Z
 11e:	11 81       	ldd	r17, Z+1	; 0x01
 120:	ba 01       	movw	r22, r20
 122:	a9 df       	rcall	.-174    	; 0x76 <_Z10CreateNodeci>
 124:	f8 01       	movw	r30, r16
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	94 83       	std	Z+4, r25	; 0x04
 130:	83 83       	std	Z+3, r24	; 0x03
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <_Z4ReadP4nodePii>:

NODE* Read(NODE* R, int* arr, int length)
{
	NODE* ptr = R;
	int i;
	for (i = 0; i < length; i++)
 140:	14 16       	cp	r1, r20
 142:	15 06       	cpc	r1, r21
 144:	84 f4       	brge	.+32     	; 0x166 <_Z4ReadP4nodePii+0x26>
 146:	db 01       	movw	r26, r22
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	64 0f       	add	r22, r20
 14e:	75 1f       	adc	r23, r21
		ptr = ptr->next[arr[i]];
 150:	ed 91       	ld	r30, X+
 152:	fd 91       	ld	r31, X+
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	83 81       	ldd	r24, Z+3	; 0x03
 15e:	94 81       	ldd	r25, Z+4	; 0x04

NODE* Read(NODE* R, int* arr, int length)
{
	NODE* ptr = R;
	int i;
	for (i = 0; i < length; i++)
 160:	a6 17       	cp	r26, r22
 162:	b7 07       	cpc	r27, r23
 164:	a9 f7       	brne	.-22     	; 0x150 <_Z4ReadP4nodePii+0x10>
		ptr = ptr->next[arr[i]];
	return ptr;
}
 166:	08 95       	ret

00000168 <main>:

int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <main+0x6>
 16e:	00 d0       	rcall	.+0      	; 0x170 <main+0x8>
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	int arr[] = {2};
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
	NODE *Root = CreateNode('a', 3);
 17c:	63 e0       	ldi	r22, 0x03	; 3
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	81 e6       	ldi	r24, 0x61	; 97
 182:	79 df       	rcall	.-270    	; 0x76 <_Z10CreateNodeci>
 184:	9c 83       	std	Y+4, r25	; 0x04
 186:	8b 83       	std	Y+3, r24	; 0x03
	InsertNode(Root, 'z', 1, arr, 1);
 188:	01 e0       	ldi	r16, 0x01	; 1
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	9e 01       	movw	r18, r28
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	6a e7       	ldi	r22, 0x7A	; 122
 198:	ce 01       	movw	r24, r28
 19a:	03 96       	adiw	r24, 0x03	; 3
 19c:	8c df       	rcall	.-232    	; 0xb6 <_Z10InsertNodeRP4nodeciPii>
	NODE *p =Read(Root, arr, 1);
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	be 01       	movw	r22, r28
 1a4:	6f 5f       	subi	r22, 0xFF	; 255
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	9c 81       	ldd	r25, Y+4	; 0x04
 1ac:	c9 df       	rcall	.-110    	; 0x140 <_Z4ReadP4nodePii>
 1ae:	8c 01       	movw	r16, r24
	USART_Init();
 1b0:	56 df       	rcall	.-340    	; 0x5e <_Z10USART_Initv>
    while (1)
	{
		USART_Transmit(p->data);
 1b2:	f8 01       	movw	r30, r16
 1b4:	80 81       	ld	r24, Z
 1b6:	5b df       	rcall	.-330    	; 0x6e <_Z14USART_Transmitc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	ff e3       	ldi	r31, 0x3F	; 63
 1ba:	2d e0       	ldi	r18, 0x0D	; 13
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	f1 50       	subi	r31, 0x01	; 1
 1c0:	20 40       	sbci	r18, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x56>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x60>
 1c8:	00 00       	nop
 1ca:	f3 cf       	rjmp	.-26     	; 0x1b2 <main+0x4a>

000001cc <malloc>:
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	91 05       	cpc	r25, r1
 1d8:	10 f4       	brcc	.+4      	; 0x1de <malloc+0x12>
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__flp>
 1e2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__flp+0x1>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	a0 e0       	ldi	r26, 0x00	; 0
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	30 97       	sbiw	r30, 0x00	; 0
 1f0:	19 f1       	breq	.+70     	; 0x238 <malloc+0x6c>
 1f2:	40 81       	ld	r20, Z
 1f4:	51 81       	ldd	r21, Z+1	; 0x01
 1f6:	02 81       	ldd	r16, Z+2	; 0x02
 1f8:	13 81       	ldd	r17, Z+3	; 0x03
 1fa:	48 17       	cp	r20, r24
 1fc:	59 07       	cpc	r21, r25
 1fe:	c8 f0       	brcs	.+50     	; 0x232 <malloc+0x66>
 200:	84 17       	cp	r24, r20
 202:	95 07       	cpc	r25, r21
 204:	69 f4       	brne	.+26     	; 0x220 <malloc+0x54>
 206:	10 97       	sbiw	r26, 0x00	; 0
 208:	31 f0       	breq	.+12     	; 0x216 <malloc+0x4a>
 20a:	12 96       	adiw	r26, 0x02	; 2
 20c:	0c 93       	st	X, r16
 20e:	12 97       	sbiw	r26, 0x02	; 2
 210:	13 96       	adiw	r26, 0x03	; 3
 212:	1c 93       	st	X, r17
 214:	27 c0       	rjmp	.+78     	; 0x264 <malloc+0x98>
 216:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <__flp>
 21a:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <__flp+0x1>
 21e:	22 c0       	rjmp	.+68     	; 0x264 <malloc+0x98>
 220:	21 15       	cp	r18, r1
 222:	31 05       	cpc	r19, r1
 224:	19 f0       	breq	.+6      	; 0x22c <malloc+0x60>
 226:	42 17       	cp	r20, r18
 228:	53 07       	cpc	r21, r19
 22a:	18 f4       	brcc	.+6      	; 0x232 <malloc+0x66>
 22c:	9a 01       	movw	r18, r20
 22e:	bd 01       	movw	r22, r26
 230:	ef 01       	movw	r28, r30
 232:	df 01       	movw	r26, r30
 234:	f8 01       	movw	r30, r16
 236:	db cf       	rjmp	.-74     	; 0x1ee <malloc+0x22>
 238:	21 15       	cp	r18, r1
 23a:	31 05       	cpc	r19, r1
 23c:	f9 f0       	breq	.+62     	; 0x27c <malloc+0xb0>
 23e:	28 1b       	sub	r18, r24
 240:	39 0b       	sbc	r19, r25
 242:	24 30       	cpi	r18, 0x04	; 4
 244:	31 05       	cpc	r19, r1
 246:	80 f4       	brcc	.+32     	; 0x268 <malloc+0x9c>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	9b 81       	ldd	r25, Y+3	; 0x03
 24c:	61 15       	cp	r22, r1
 24e:	71 05       	cpc	r23, r1
 250:	21 f0       	breq	.+8      	; 0x25a <malloc+0x8e>
 252:	fb 01       	movw	r30, r22
 254:	93 83       	std	Z+3, r25	; 0x03
 256:	82 83       	std	Z+2, r24	; 0x02
 258:	04 c0       	rjmp	.+8      	; 0x262 <malloc+0x96>
 25a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__flp+0x1>
 25e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__flp>
 262:	fe 01       	movw	r30, r28
 264:	32 96       	adiw	r30, 0x02	; 2
 266:	44 c0       	rjmp	.+136    	; 0x2f0 <malloc+0x124>
 268:	fe 01       	movw	r30, r28
 26a:	e2 0f       	add	r30, r18
 26c:	f3 1f       	adc	r31, r19
 26e:	81 93       	st	Z+, r24
 270:	91 93       	st	Z+, r25
 272:	22 50       	subi	r18, 0x02	; 2
 274:	31 09       	sbc	r19, r1
 276:	39 83       	std	Y+1, r19	; 0x01
 278:	28 83       	st	Y, r18
 27a:	3a c0       	rjmp	.+116    	; 0x2f0 <malloc+0x124>
 27c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 280:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 284:	23 2b       	or	r18, r19
 286:	41 f4       	brne	.+16     	; 0x298 <malloc+0xcc>
 288:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 28c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 290:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
 294:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
 298:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 29c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 2a0:	21 15       	cp	r18, r1
 2a2:	31 05       	cpc	r19, r1
 2a4:	41 f4       	brne	.+16     	; 0x2b6 <malloc+0xea>
 2a6:	2d b7       	in	r18, 0x3d	; 61
 2a8:	3e b7       	in	r19, 0x3e	; 62
 2aa:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 2ae:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 2b2:	24 1b       	sub	r18, r20
 2b4:	35 0b       	sbc	r19, r21
 2b6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 2ba:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 2be:	e2 17       	cp	r30, r18
 2c0:	f3 07       	cpc	r31, r19
 2c2:	a0 f4       	brcc	.+40     	; 0x2ec <malloc+0x120>
 2c4:	2e 1b       	sub	r18, r30
 2c6:	3f 0b       	sbc	r19, r31
 2c8:	28 17       	cp	r18, r24
 2ca:	39 07       	cpc	r19, r25
 2cc:	78 f0       	brcs	.+30     	; 0x2ec <malloc+0x120>
 2ce:	ac 01       	movw	r20, r24
 2d0:	4e 5f       	subi	r20, 0xFE	; 254
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	24 17       	cp	r18, r20
 2d6:	35 07       	cpc	r19, r21
 2d8:	48 f0       	brcs	.+18     	; 0x2ec <malloc+0x120>
 2da:	4e 0f       	add	r20, r30
 2dc:	5f 1f       	adc	r21, r31
 2de:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <__data_end+0x1>
 2e2:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__data_end>
 2e6:	81 93       	st	Z+, r24
 2e8:	91 93       	st	Z+, r25
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <malloc+0x124>
 2ec:	e0 e0       	ldi	r30, 0x00	; 0
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	cf 01       	movw	r24, r30
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <free>:
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	09 f4       	brne	.+2      	; 0x306 <free+0xa>
 304:	81 c0       	rjmp	.+258    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 306:	fc 01       	movw	r30, r24
 308:	32 97       	sbiw	r30, 0x02	; 2
 30a:	13 82       	std	Z+3, r1	; 0x03
 30c:	12 82       	std	Z+2, r1	; 0x02
 30e:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__flp>
 312:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__flp+0x1>
 316:	10 97       	sbiw	r26, 0x00	; 0
 318:	81 f4       	brne	.+32     	; 0x33a <free+0x3e>
 31a:	20 81       	ld	r18, Z
 31c:	31 81       	ldd	r19, Z+1	; 0x01
 31e:	82 0f       	add	r24, r18
 320:	93 1f       	adc	r25, r19
 322:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 326:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 32a:	28 17       	cp	r18, r24
 32c:	39 07       	cpc	r19, r25
 32e:	51 f5       	brne	.+84     	; 0x384 <free+0x88>
 330:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
 334:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
 338:	67 c0       	rjmp	.+206    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 33a:	ed 01       	movw	r28, r26
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	ce 17       	cp	r28, r30
 342:	df 07       	cpc	r29, r31
 344:	40 f4       	brcc	.+16     	; 0x356 <free+0x5a>
 346:	4a 81       	ldd	r20, Y+2	; 0x02
 348:	5b 81       	ldd	r21, Y+3	; 0x03
 34a:	9e 01       	movw	r18, r28
 34c:	41 15       	cp	r20, r1
 34e:	51 05       	cpc	r21, r1
 350:	f1 f0       	breq	.+60     	; 0x38e <free+0x92>
 352:	ea 01       	movw	r28, r20
 354:	f5 cf       	rjmp	.-22     	; 0x340 <free+0x44>
 356:	d3 83       	std	Z+3, r29	; 0x03
 358:	c2 83       	std	Z+2, r28	; 0x02
 35a:	40 81       	ld	r20, Z
 35c:	51 81       	ldd	r21, Z+1	; 0x01
 35e:	84 0f       	add	r24, r20
 360:	95 1f       	adc	r25, r21
 362:	c8 17       	cp	r28, r24
 364:	d9 07       	cpc	r29, r25
 366:	59 f4       	brne	.+22     	; 0x37e <free+0x82>
 368:	88 81       	ld	r24, Y
 36a:	99 81       	ldd	r25, Y+1	; 0x01
 36c:	84 0f       	add	r24, r20
 36e:	95 1f       	adc	r25, r21
 370:	02 96       	adiw	r24, 0x02	; 2
 372:	91 83       	std	Z+1, r25	; 0x01
 374:	80 83       	st	Z, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	9b 81       	ldd	r25, Y+3	; 0x03
 37a:	93 83       	std	Z+3, r25	; 0x03
 37c:	82 83       	std	Z+2, r24	; 0x02
 37e:	21 15       	cp	r18, r1
 380:	31 05       	cpc	r19, r1
 382:	29 f4       	brne	.+10     	; 0x38e <free+0x92>
 384:	f0 93 69 00 	sts	0x0069, r31	; 0x800069 <__flp+0x1>
 388:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <__flp>
 38c:	3d c0       	rjmp	.+122    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 38e:	e9 01       	movw	r28, r18
 390:	fb 83       	std	Y+3, r31	; 0x03
 392:	ea 83       	std	Y+2, r30	; 0x02
 394:	49 91       	ld	r20, Y+
 396:	59 91       	ld	r21, Y+
 398:	c4 0f       	add	r28, r20
 39a:	d5 1f       	adc	r29, r21
 39c:	ec 17       	cp	r30, r28
 39e:	fd 07       	cpc	r31, r29
 3a0:	61 f4       	brne	.+24     	; 0x3ba <free+0xbe>
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	84 0f       	add	r24, r20
 3a8:	95 1f       	adc	r25, r21
 3aa:	02 96       	adiw	r24, 0x02	; 2
 3ac:	e9 01       	movw	r28, r18
 3ae:	99 83       	std	Y+1, r25	; 0x01
 3b0:	88 83       	st	Y, r24
 3b2:	82 81       	ldd	r24, Z+2	; 0x02
 3b4:	93 81       	ldd	r25, Z+3	; 0x03
 3b6:	9b 83       	std	Y+3, r25	; 0x03
 3b8:	8a 83       	std	Y+2, r24	; 0x02
 3ba:	e0 e0       	ldi	r30, 0x00	; 0
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	12 96       	adiw	r26, 0x02	; 2
 3c0:	8d 91       	ld	r24, X+
 3c2:	9c 91       	ld	r25, X
 3c4:	13 97       	sbiw	r26, 0x03	; 3
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <free+0xd4>
 3ca:	fd 01       	movw	r30, r26
 3cc:	dc 01       	movw	r26, r24
 3ce:	f7 cf       	rjmp	.-18     	; 0x3be <free+0xc2>
 3d0:	8d 91       	ld	r24, X+
 3d2:	9c 91       	ld	r25, X
 3d4:	11 97       	sbiw	r26, 0x01	; 1
 3d6:	9d 01       	movw	r18, r26
 3d8:	2e 5f       	subi	r18, 0xFE	; 254
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 3e4:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	69 f4       	brne	.+26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ee:	30 97       	sbiw	r30, 0x00	; 0
 3f0:	29 f4       	brne	.+10     	; 0x3fc <free+0x100>
 3f2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp+0x1>
 3f6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__flp>
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	13 82       	std	Z+3, r1	; 0x03
 3fe:	12 82       	std	Z+2, r1	; 0x02
 400:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x1>
 404:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end>
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
