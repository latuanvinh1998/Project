
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000053a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000116d  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b6  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a26  00000000  00000000  00002157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a18  00000000  00000000  000030bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  7a:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EEOpen>:
#include "24c64.h"

void EEOpen()
{
	//Set up TWI Module
	TWBR = 5;
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
  86:	81 b1       	in	r24, 0x01	; 1
  88:	8c 7f       	andi	r24, 0xFC	; 252
  8a:	81 b9       	out	0x01, r24	; 1
  8c:	08 95       	ret

0000008e <EEWriteByte>:
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  8e:	34 ea       	ldi	r19, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
  90:	50 ea       	ldi	r21, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
  92:	44 e8       	ldi	r20, 0x84	; 132
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  94:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <EEWriteByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
  9c:	21 b1       	in	r18, 0x01	; 1
  9e:	28 7f       	andi	r18, 0xF8	; 248
  a0:	28 30       	cpi	r18, 0x08	; 8
  a2:	a1 f5       	brne	.+104    	; 0x10c <EEWriteByte+0x7e>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
  a4:	53 b9       	out	0x03, r21	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
  a6:	46 bf       	out	0x36, r20	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <EEWriteByte+0x1a>
	
	}while((TWSR & 0xF8) != 0x18);
  ae:	21 b1       	in	r18, 0x01	; 1
  b0:	28 7f       	andi	r18, 0xF8	; 248
  b2:	28 31       	cpi	r18, 0x18	; 24
  b4:	79 f7       	brne	.-34     	; 0x94 <EEWriteByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
  b6:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
  b8:	94 e8       	ldi	r25, 0x84	; 132
  ba:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <EEWriteByte+0x2e>

	//Check status
	if((TWSR & 0xF8) != 0x28)
  c2:	91 b1       	in	r25, 0x01	; 1
  c4:	98 7f       	andi	r25, 0xF8	; 248
  c6:	98 32       	cpi	r25, 0x28	; 40
  c8:	19 f5       	brne	.+70     	; 0x110 <EEWriteByte+0x82>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
  ca:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <EEWriteByte+0x42>

	//Check status
	if((TWSR & 0xF8) != 0x28)
  d6:	81 b1       	in	r24, 0x01	; 1
  d8:	88 7f       	andi	r24, 0xF8	; 248
  da:	88 32       	cpi	r24, 0x28	; 40
  dc:	d9 f4       	brne	.+54     	; 0x114 <EEWriteByte+0x86>
		return FALSE;

	//Now write DATA
	TWDR=(data);
  de:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <EEWriteByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x28)
  ea:	81 b1       	in	r24, 0x01	; 1
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	88 32       	cpi	r24, 0x28	; 40
  f0:	99 f4       	brne	.+38     	; 0x118 <EEWriteByte+0x8a>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
  f6:	06 b6       	in	r0, 0x36	; 54
  f8:	04 fc       	sbrc	r0, 4
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <EEWriteByte+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	87 eb       	ldi	r24, 0xB7	; 183
  fe:	9b e0       	ldi	r25, 0x0B	; 11
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <EEWriteByte+0x72>
 104:	00 c0       	rjmp	.+0      	; 0x106 <EEWriteByte+0x78>
 106:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 118:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(12);

	//Return TRUE
	return TRUE;

}
 11a:	08 95       	ret

0000011c <EEReadByte>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 11c:	34 ea       	ldi	r19, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 11e:	50 ea       	ldi	r21, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 120:	44 e8       	ldi	r20, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 122:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <EEReadByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 12a:	21 b1       	in	r18, 0x01	; 1
 12c:	28 7f       	andi	r18, 0xF8	; 248
 12e:	28 30       	cpi	r18, 0x08	; 8
 130:	09 f0       	breq	.+2      	; 0x134 <EEReadByte+0x18>
 132:	41 c0       	rjmp	.+130    	; 0x1b6 <EEReadByte+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 134:	53 b9       	out	0x03, r21	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 136:	46 bf       	out	0x36, r20	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 138:	06 b6       	in	r0, 0x36	; 54
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <EEReadByte+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
 13e:	21 b1       	in	r18, 0x01	; 1
 140:	28 7f       	andi	r18, 0xF8	; 248
 142:	28 31       	cpi	r18, 0x18	; 24
 144:	71 f7       	brne	.-36     	; 0x122 <EEReadByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 146:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 148:	94 e8       	ldi	r25, 0x84	; 132
 14a:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 14c:	06 b6       	in	r0, 0x36	; 54
 14e:	07 fe       	sbrs	r0, 7
 150:	fd cf       	rjmp	.-6      	; 0x14c <EEReadByte+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 152:	91 b1       	in	r25, 0x01	; 1
 154:	98 7f       	andi	r25, 0xF8	; 248
 156:	98 32       	cpi	r25, 0x28	; 40
 158:	81 f5       	brne	.+96     	; 0x1ba <EEReadByte+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 15a:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 160:	06 b6       	in	r0, 0x36	; 54
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <EEReadByte+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 166:	81 b1       	in	r24, 0x01	; 1
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	88 32       	cpi	r24, 0x28	; 40
 16c:	41 f5       	brne	.+80     	; 0x1be <EEReadByte+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 16e:	84 ea       	ldi	r24, 0xA4	; 164
 170:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <EEReadByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
 178:	81 b1       	in	r24, 0x01	; 1
 17a:	88 7f       	andi	r24, 0xF8	; 248
 17c:	80 31       	cpi	r24, 0x10	; 16
 17e:	09 f5       	brne	.+66     	; 0x1c2 <EEReadByte+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
 180:	81 ea       	ldi	r24, 0xA1	; 161
 182:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 188:	06 b6       	in	r0, 0x36	; 54
 18a:	07 fe       	sbrs	r0, 7
 18c:	fd cf       	rjmp	.-6      	; 0x188 <EEReadByte+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
 18e:	81 b1       	in	r24, 0x01	; 1
 190:	88 7f       	andi	r24, 0xF8	; 248
 192:	80 34       	cpi	r24, 0x40	; 64
 194:	c1 f4       	brne	.+48     	; 0x1c6 <EEReadByte+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
 19a:	06 b6       	in	r0, 0x36	; 54
 19c:	07 fe       	sbrs	r0, 7
 19e:	fd cf       	rjmp	.-6      	; 0x19a <EEReadByte+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
 1a0:	81 b1       	in	r24, 0x01	; 1
 1a2:	88 7f       	andi	r24, 0xF8	; 248
 1a4:	88 35       	cpi	r24, 0x58	; 88
 1a6:	89 f4       	brne	.+34     	; 0x1ca <EEReadByte+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
 1a8:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 1aa:	94 e9       	ldi	r25, 0x94	; 148
 1ac:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 1ae:	06 b6       	in	r0, 0x36	; 54
 1b0:	04 fc       	sbrc	r0, 4
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <EEReadByte+0x92>
 1b4:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
 1cc:	08 95       	ret

000001ce <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1ce:	87 b3       	in	r24, 0x17	; 23
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 1d4:	ae 9a       	sbi	0x15, 6	; 21
	CLEAR_RS();		//Read status
 1d6:	af 98       	cbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1de:	c4 9a       	sbi	0x18, 4	; 24
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1e6:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCDBusyLoop+0x20>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1f2:	c4 98       	cbi	0x18, 4	; 24
 1f4:	94 e0       	ldi	r25, 0x04	; 4
 1f6:	9a 95       	dec	r25
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
 1fa:	c4 9a       	sbi	0x18, 4	; 24
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDBusyLoop+0x30>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 202:	96 b3       	in	r25, 0x16	; 22
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDBusyLoop+0x38>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 20a:	c4 98       	cbi	0x18, 4	; 24
 20c:	94 e0       	ldi	r25, 0x04	; 4
 20e:	9a 95       	dec	r25
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDBusyLoop+0x40>
		_delay_us(1);	//tEL
	}while(busy);
 212:	88 23       	and	r24, r24
 214:	24 f3       	brlt	.-56     	; 0x1de <LCDBusyLoop+0x10>

	CLEAR_RW();		//write mode
 216:	ae 98       	cbi	0x15, 6	; 21
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 218:	87 b3       	in	r24, 0x17	; 23
 21a:	8f 60       	ori	r24, 0x0F	; 15
 21c:	87 bb       	out	0x17, r24	; 23
 21e:	08 95       	ret

00000220 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 220:	28 2f       	mov	r18, r24
 222:	22 95       	swap	r18
 224:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 226:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 228:	61 11       	cpse	r22, r1
 22a:	02 c0       	rjmp	.+4      	; 0x230 <LCDByte+0x10>
	CLEAR_RS();
 22c:	af 98       	cbi	0x15, 7	; 21
 22e:	01 c0       	rjmp	.+2      	; 0x232 <LCDByte+0x12>
else
	SET_RS();
 230:	af 9a       	sbi	0x15, 7	; 21
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <LCDByte+0x14>

_delay_us(0.500);		//tAS

SET_E();
 238:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 23a:	98 b3       	in	r25, 0x18	; 24
 23c:	90 7f       	andi	r25, 0xF0	; 240
 23e:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 240:	98 bb       	out	0x18, r25	; 24
 242:	94 e0       	ldi	r25, 0x04	; 4
 244:	9a 95       	dec	r25
 246:	f1 f7       	brne	.-4      	; 0x244 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 248:	c4 98       	cbi	0x18, 4	; 24
 24a:	94 e0       	ldi	r25, 0x04	; 4
 24c:	9a 95       	dec	r25
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
 250:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 252:	98 b3       	in	r25, 0x18	; 24
 254:	90 7f       	andi	r25, 0xF0	; 240
 256:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 258:	88 bb       	out	0x18, r24	; 24
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDByte+0x3c>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 260:	c4 98       	cbi	0x18, 4	; 24
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <LCDByte+0x44>

_delay_us(1);			//tEL

LCDBusyLoop();
 268:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCDBusyLoop>
 26c:	08 95       	ret

0000026e <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 26e:	cf 93       	push	r28
 270:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f e3       	ldi	r18, 0x3F	; 63
 274:	89 e1       	ldi	r24, 0x19	; 25
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <LCDInit+0xa>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCDInit+0x14>
 282:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 284:	87 b3       	in	r24, 0x17	; 23
 286:	8f 60       	ori	r24, 0x0F	; 15
 288:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 28a:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 28c:	a7 9a       	sbi	0x14, 7	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 28e:	a6 9a       	sbi	0x14, 6	; 20

	LCD_DATA_PORT&=0XF0;
 290:	88 b3       	in	r24, 0x18	; 24
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 296:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 298:	ae 98       	cbi	0x15, 6	; 21
	CLEAR_RS();
 29a:	af 98       	cbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCDInit+0x30>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCDInit+0x32>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 2a0:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 2a2:	c1 9a       	sbi	0x18, 1	; 24
 2a4:	24 e0       	ldi	r18, 0x04	; 4
 2a6:	2a 95       	dec	r18
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCDInit+0x38>
	_delay_us(1);
	CLEAR_E();
 2aa:	c4 98       	cbi	0x18, 4	; 24
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCDInit+0x40>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 2b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	8c 2f       	mov	r24, r28
 2ba:	8c 60       	ori	r24, 0x0C	; 12
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <LCDWriteString+0x1a>
 2d8:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2e0:	89 91       	ld	r24, Y+
 2e2:	81 11       	cpse	r24, r1
 2e4:	fa cf       	rjmp	.-12     	; 0x2da <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <LCDWriteInt+0xe>
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <LCDWriteInt+0x10>
 2fc:	1f 92       	push	r1
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 304:	fe 01       	movw	r30, r28
 306:	31 96       	adiw	r30, 0x01	; 1
 308:	25 e0       	ldi	r18, 0x05	; 5
 30a:	df 01       	movw	r26, r30
 30c:	1d 92       	st	X+, r1
 30e:	2a 95       	dec	r18
 310:	e9 f7       	brne	.-6      	; 0x30c <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	59 f0       	breq	.+22     	; 0x32c <LCDWriteInt+0x40>
 316:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 318:	2a e0       	ldi	r18, 0x0A	; 10
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	b9 01       	movw	r22, r18
 31e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__divmodhi4>
 322:	82 93       	st	-Z, r24
	val=val/10;
 324:	86 2f       	mov	r24, r22
 326:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 328:	00 97       	sbiw	r24, 0x00	; 0
 32a:	c1 f7       	brne	.-16     	; 0x31c <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 32c:	bf ef       	ldi	r27, 0xFF	; 255
 32e:	eb 16       	cp	r14, r27
 330:	fb 06       	cpc	r15, r27
 332:	69 f4       	brne	.+26     	; 0x34e <LCDWriteInt+0x62>
		while(str[j]==0) j++;
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	81 11       	cpse	r24, r1
 338:	1e c0       	rjmp	.+60     	; 0x376 <LCDWriteInt+0x8a>
 33a:	fe 01       	movw	r30, r28
 33c:	32 96       	adiw	r30, 0x02	; 2
 33e:	00 e0       	ldi	r16, 0x00	; 0
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	0f 5f       	subi	r16, 0xFF	; 255
 344:	1f 4f       	sbci	r17, 0xFF	; 255
 346:	81 91       	ld	r24, Z+
 348:	88 23       	and	r24, r24
 34a:	d9 f3       	breq	.-10     	; 0x342 <LCDWriteInt+0x56>
 34c:	10 c0       	rjmp	.+32     	; 0x36e <LCDWriteInt+0x82>
	else
		j=5-field_length;
 34e:	05 e0       	ldi	r16, 0x05	; 5
 350:	10 e0       	ldi	r17, 0x00	; 0
 352:	0e 19       	sub	r16, r14
 354:	1f 09       	sbc	r17, r15
 356:	0b c0       	rjmp	.+22     	; 0x36e <LCDWriteInt+0x82>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 358:	f8 01       	movw	r30, r16
 35a:	81 91       	ld	r24, Z+
 35c:	8f 01       	movw	r16, r30
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 366:	0e 15       	cp	r16, r14
 368:	1f 05       	cpc	r17, r15
 36a:	b1 f7       	brne	.-20     	; 0x358 <LCDWriteInt+0x6c>
 36c:	11 c0       	rjmp	.+34     	; 0x390 <LCDWriteInt+0xa4>
 36e:	05 30       	cpi	r16, 0x05	; 5
 370:	11 05       	cpc	r17, r1
 372:	1c f0       	brlt	.+6      	; 0x37a <LCDWriteInt+0x8e>
 374:	0d c0       	rjmp	.+26     	; 0x390 <LCDWriteInt+0xa4>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 376:	00 e0       	ldi	r16, 0x00	; 0
 378:	10 e0       	ldi	r17, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	8c 0f       	add	r24, r28
 380:	9d 1f       	adc	r25, r29
 382:	08 0f       	add	r16, r24
 384:	19 1f       	adc	r17, r25
 386:	7e 01       	movw	r14, r28
 388:	96 e0       	ldi	r25, 0x06	; 6
 38a:	e9 0e       	add	r14, r25
 38c:	f1 1c       	adc	r15, r1
 38e:	e4 cf       	rjmp	.-56     	; 0x358 <LCDWriteInt+0x6c>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	08 95       	ret

000003a8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 3a8:	88 32       	cpi	r24, 0x28	; 40
 3aa:	30 f4       	brcc	.+12     	; 0x3b8 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 3ac:	61 11       	cpse	r22, r1
 3ae:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
 3b8:	08 95       	ret

000003ba <Wait>:
between messages given to user
so that he/she gets time to read them

***********************************/
void Wait()
{
 3ba:	84 e6       	ldi	r24, 0x64	; 100
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <Wait+0x8>
 3c6:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;

	for(i=0;i<100;i++)
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <Wait+0x6>
		_delay_loop_2(0);
}
 3ca:	08 95       	ret

000003cc <main>:
	//Varriables
	uint8_t failed;
	unsigned int address;

	//Initialize LCD
	LCDInit(LS_BLINK);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 37 01 	call	0x26e	; 0x26e <LCDInit>

	//Init EEPROM
	EEOpen();
 3d2:	0e 94 41 00 	call	0x82	; 0x82 <EEOpen>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <main+0xe>

	_delay_loop_2(0);
	
	LCDClear();
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
	LCDWriteString("External EEPROM");
 3e6:	80 e6       	ldi	r24, 0x60	; 96
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
	LCDWriteStringXY(0,1,"Test");
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDGotoXY>
 3f6:	80 e7       	ldi	r24, 0x70	; 112
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>

	Wait();
 3fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Wait>

	LCDClear();
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
	LCDWriteString("Writting...");
 40a:	85 e7       	ldi	r24, 0x75	; 117
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>

	//Fill whole eeprom 8KB (8192 bytes)
	//with number 7
	failed=0;
	for(address=0;address<8192;address++)
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(EEWriteByte(address,7)==0)
 416:	67 e0       	ldi	r22, 0x07	; 7
 418:	ce 01       	movw	r24, r28
 41a:	0e 94 47 00 	call	0x8e	; 0x8e <EEWriteByte>
 41e:	81 11       	cpse	r24, r1
 420:	1c c0       	rjmp	.+56     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{
			//Write Failed
			LCDClear();
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
			LCDWriteString("Write Failed !");
 42a:	81 e8       	ldi	r24, 0x81	; 129
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
			LCDWriteStringXY(0,1,"Addess = ");
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDGotoXY>
 43a:	80 e9       	ldi	r24, 0x90	; 144
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
			LCDWriteInt(address,4);
 442:	64 e0       	ldi	r22, 0x04	; 4
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	ce 01       	movw	r24, r28
 448:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDWriteInt>
			failed=1;
			Wait();
 44c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Wait>
			break;
		}
	}

	LCDClear();
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
 458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	LCDWriteString("Writting...");

	//Fill whole eeprom 8KB (8192 bytes)
	//with number 7
	failed=0;
	for(address=0;address<8192;address++)
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	c1 15       	cp	r28, r1
 45e:	80 e2       	ldi	r24, 0x20	; 32
 460:	d8 07       	cpc	r29, r24
 462:	c9 f6       	brne	.-78     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 464:	37 c0       	rjmp	.+110    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	LCDClear();

	if(!failed)
		LCDWriteString("Written 8192bytes");

	Wait();
 466:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Wait>

	LCDClear();
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
	LCDWriteString("Verifying ...");
 472:	8a e9       	ldi	r24, 0x9A	; 154
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>

	//Check if every location in EEPROM has 
	//number 7 stored
	failed=0;
	for(address=0;address<8192;address++)
 47a:	c0 e0       	ldi	r28, 0x00	; 0
 47c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(EEReadByte(address)!=7)
 47e:	ce 01       	movw	r24, r28
 480:	0e 94 8e 00 	call	0x11c	; 0x11c <EEReadByte>
 484:	87 30       	cpi	r24, 0x07	; 7
 486:	c1 f0       	breq	.+48     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		{
			//Failed !
			LCDClear();
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
			LCDWriteString("Verify Failed");
 490:	88 ea       	ldi	r24, 0xA8	; 168
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
			LCDWriteStringXY(0,1,"Addess = ");
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDGotoXY>
 4a0:	80 e9       	ldi	r24, 0x90	; 144
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
			LCDWriteInt(address,4);
 4a8:	64 e0       	ldi	r22, 0x04	; 4
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	ce 01       	movw	r24, r28
 4ae:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDWriteInt>
			failed=1;
			Wait();
 4b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Wait>
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	LCDWriteString("Verifying ...");

	//Check if every location in EEPROM has 
	//number 7 stored
	failed=0;
	for(address=0;address<8192;address++)
 4b8:	21 96       	adiw	r28, 0x01	; 1
 4ba:	c1 15       	cp	r28, r1
 4bc:	80 e2       	ldi	r24, 0x20	; 32
 4be:	d8 07       	cpc	r29, r24
 4c0:	f1 f6       	brne	.-68     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	}

	if(!failed)
	{
		//We have Done it !!!
		LCDClear();
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>
		LCDWriteString("Write Success !");
 4ca:	86 eb       	ldi	r24, 0xB6	; 182
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
 4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			Wait();
			break;
		}
	}

	LCDClear();
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 10 01 	call	0x220	; 0x220 <LCDByte>

	if(!failed)
		LCDWriteString("Written 8192bytes");
 4dc:	86 ec       	ldi	r24, 0xC6	; 198
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDWriteString>
 4e4:	c0 cf       	rjmp	.-128    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>

000004e6 <__divmodhi4>:
 4e6:	97 fb       	bst	r25, 7
 4e8:	07 2e       	mov	r0, r23
 4ea:	16 f4       	brtc	.+4      	; 0x4f0 <__divmodhi4+0xa>
 4ec:	00 94       	com	r0
 4ee:	07 d0       	rcall	.+14     	; 0x4fe <__divmodhi4_neg1>
 4f0:	77 fd       	sbrc	r23, 7
 4f2:	09 d0       	rcall	.+18     	; 0x506 <__divmodhi4_neg2>
 4f4:	0e 94 87 02 	call	0x50e	; 0x50e <__udivmodhi4>
 4f8:	07 fc       	sbrc	r0, 7
 4fa:	05 d0       	rcall	.+10     	; 0x506 <__divmodhi4_neg2>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__divmodhi4_exit>

000004fe <__divmodhi4_neg1>:
 4fe:	90 95       	com	r25
 500:	81 95       	neg	r24
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__divmodhi4_neg2>:
 506:	70 95       	com	r23
 508:	61 95       	neg	r22
 50a:	7f 4f       	sbci	r23, 0xFF	; 255

0000050c <__divmodhi4_exit>:
 50c:	08 95       	ret

0000050e <__udivmodhi4>:
 50e:	aa 1b       	sub	r26, r26
 510:	bb 1b       	sub	r27, r27
 512:	51 e1       	ldi	r21, 0x11	; 17
 514:	07 c0       	rjmp	.+14     	; 0x524 <__udivmodhi4_ep>

00000516 <__udivmodhi4_loop>:
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	a6 17       	cp	r26, r22
 51c:	b7 07       	cpc	r27, r23
 51e:	10 f0       	brcs	.+4      	; 0x524 <__udivmodhi4_ep>
 520:	a6 1b       	sub	r26, r22
 522:	b7 0b       	sbc	r27, r23

00000524 <__udivmodhi4_ep>:
 524:	88 1f       	adc	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	5a 95       	dec	r21
 52a:	a9 f7       	brne	.-22     	; 0x516 <__udivmodhi4_loop>
 52c:	80 95       	com	r24
 52e:	90 95       	com	r25
 530:	bc 01       	movw	r22, r24
 532:	cd 01       	movw	r24, r26
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
