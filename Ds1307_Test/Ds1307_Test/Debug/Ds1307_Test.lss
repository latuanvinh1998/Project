
Ds1307_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006a  0080006a  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090d  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000618  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d5  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b4  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ed       	ldi	r30, 0xDA	; 218
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 37       	cpi	r26, 0x71	; 113
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e0 d0       	rcall	.+448    	; 0x21a <main>
  5a:	3d c1       	rjmp	.+634    	; 0x2d6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8TWI_Initv>:
#define TWI_Clear_TWINT	(1<<TWINT)|(1<<TWEN)		    //0x84 : xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
  5e:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
  60:	80 e2       	ldi	r24, 0x20	; 32
  62:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);
  64:	84 e8       	ldi	r24, 0x84	; 132
  66:	86 bf       	out	0x36, r24	; 54
  68:	08 95       	ret

0000006a <_Z15TWI_DS1307_wadrh>:
}


uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						
  6a:	94 ea       	ldi	r25, 0xA4	; 164
  6c:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 
  6e:	06 b6       	in	r0, 0x36	; 54
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <_Z15TWI_DS1307_wadrh+0x4>
	if((TWSR&0xF8) !=0x08) return 1;
  74:	91 b1       	in	r25, 0x01	; 1
  76:	98 7f       	andi	r25, 0xF8	; 248
  78:	98 30       	cpi	r25, 0x08	; 8
  7a:	c9 f4       	brne	.+50     	; 0xae <_Z15TWI_DS1307_wadrh+0x44>
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 	
  7c:	90 ed       	ldi	r25, 0xD0	; 208
  7e:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 
  80:	94 e8       	ldi	r25, 0x84	; 132
  82:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		
  84:	06 b6       	in	r0, 0x36	; 54
  86:	07 fe       	sbrs	r0, 7
  88:	fd cf       	rjmp	.-6      	; 0x84 <_Z15TWI_DS1307_wadrh+0x1a>
	if((TWSR&0xF8) !=0x18) return 1; 
  8a:	91 b1       	in	r25, 0x01	; 1
  8c:	98 7f       	andi	r25, 0xF8	; 248
  8e:	98 31       	cpi	r25, 0x18	; 24
  90:	81 f4       	brne	.+32     	; 0xb2 <_Z15TWI_DS1307_wadrh+0x48>
		
	TWDR=Addr; 							 
  92:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				
  94:	84 e8       	ldi	r24, 0x84	; 132
  96:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <_Z15TWI_DS1307_wadrh+0x2e>
	if((TWSR&0xF8) !=0x28) return 1;
  9e:	81 b1       	in	r24, 0x01	; 1
  a0:	88 7f       	andi	r24, 0xF8	; 248
  a2:	88 32       	cpi	r24, 0x28	; 40
  a4:	41 f4       	brne	.+16     	; 0xb6 <_Z15TWI_DS1307_wadrh+0x4c>
	
	TWCR=TWI_STOP;					  
  a6:	84 e9       	ldi	r24, 0x94	; 148
  a8:	86 bf       	out	0x36, r24	; 54
	return 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret

uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						
	while((TWCR & 0x80)==0x00);		 
	if((TWSR&0xF8) !=0x08) return 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 	
	TWCR=TWI_Clear_TWINT; 				 
	while((TWCR & 0x80)==0x00);		
	if((TWSR&0xF8) !=0x18) return 1; 
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
		
	TWDR=Addr; 							 
	TWCR=TWI_Clear_TWINT; 				
	while((TWCR & 0x80)==0x00);		 
	if((TWSR&0xF8) !=0x28) return 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
	
	TWCR=TWI_STOP;					  
	return 0;
}
  b8:	08 95       	ret

000000ba <_Z17TWI_DS1307_wblockhPVhh>:

uint8_t TWI_DS1307_wblock(volatile uint8_t Addr,volatile uint8_t Data[], uint8_t len){
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
		
	TWCR=TWI_START; 					 //goi START condition
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
  ca:	06 b6       	in	r0, 0x36	; 54
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <_Z17TWI_DS1307_wblockhPVhh+0x10>
	if((TWSR&0xF8) !=0x08) return 1; //neu goi Start co loi thi thoat
  d0:	81 b1       	in	r24, 0x01	; 1
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 f5       	brne	.+100    	; 0x13c <_Z17TWI_DS1307_wblockhPVhh+0x82>
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
  d8:	80 ed       	ldi	r24, 0xD0	; 208
  da:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
  e0:	06 b6       	in	r0, 0x36	; 54
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <_Z17TWI_DS1307_wblockhPVhh+0x26>
	if((TWSR&0xF8) !=0x18) return 1; //neu co loi truyen SLA, thoat
  e6:	81 b1       	in	r24, 0x01	; 1
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	88 31       	cpi	r24, 0x18	; 24
  ec:	49 f5       	brne	.+82     	; 0x140 <_Z17TWI_DS1307_wblockhPVhh+0x86>
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
  f6:	06 b6       	in	r0, 0x36	; 54
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <_Z17TWI_DS1307_wblockhPVhh+0x3c>
	if((TWSR&0xF8) !=0x28) return 1; 
  fc:	81 b1       	in	r24, 0x01	; 1
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	88 32       	cpi	r24, 0x28	; 40
 102:	01 f5       	brne	.+64     	; 0x144 <_Z17TWI_DS1307_wblockhPVhh+0x8a>

	for (uint8_t i=0; i <len; i++){
 104:	44 23       	and	r20, r20
 106:	b1 f0       	breq	.+44     	; 0x134 <_Z17TWI_DS1307_wblockhPVhh+0x7a>
 108:	fb 01       	movw	r30, r22
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	84 2f       	mov	r24, r20
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	68 0f       	add	r22, r24
 114:	79 1f       	adc	r23, r25
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
 116:	94 e8       	ldi	r25, 0x84	; 132
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return 1; 

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
 118:	80 81       	ld	r24, Z
 11a:	83 b9       	out	0x03, r24	; 3
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
 11c:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
 11e:	06 b6       	in	r0, 0x36	; 54
 120:	07 fe       	sbrs	r0, 7
 122:	fd cf       	rjmp	.-6      	; 0x11e <_Z17TWI_DS1307_wblockhPVhh+0x64>
		if((TWSR&0xF8) !=0x28) return 1; //neu status ko phai la 0x28 thi return
 124:	81 b1       	in	r24, 0x01	; 1
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	88 32       	cpi	r24, 0x28	; 40
 12a:	71 f4       	brne	.+28     	; 0x148 <_Z17TWI_DS1307_wblockhPVhh+0x8e>
 12c:	31 96       	adiw	r30, 0x01	; 1
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return 1; 

	for (uint8_t i=0; i <len; i++){
 12e:	e6 17       	cp	r30, r22
 130:	f7 07       	cpc	r31, r23
 132:	91 f7       	brne	.-28     	; 0x118 <_Z17TWI_DS1307_wblockhPVhh+0x5e>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return 1; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
 134:	84 e9       	ldi	r24, 0x94	; 148
 136:	86 bf       	out	0x36, r24	; 54
	return 0;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	07 c0       	rjmp	.+14     	; 0x14a <_Z17TWI_DS1307_wblockhPVhh+0x90>

uint8_t TWI_DS1307_wblock(volatile uint8_t Addr,volatile uint8_t Data[], uint8_t len){
		
	TWCR=TWI_START; 					 //goi START condition
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x08) return 1; //neu goi Start co loi thi thoat
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	05 c0       	rjmp	.+10     	; 0x14a <_Z17TWI_DS1307_wblockhPVhh+0x90>
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x18) return 1; //neu co loi truyen SLA, thoat
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	03 c0       	rjmp	.+6      	; 0x14a <_Z17TWI_DS1307_wblockhPVhh+0x90>
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return 1; 
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	01 c0       	rjmp	.+2      	; 0x14a <_Z17TWI_DS1307_wblockhPVhh+0x90>

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return 1; //neu status ko phai la 0x28 thi return
 148:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TWCR=TWI_STOP;							 //STOP condition
	return 0;
}
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <_Z17TWI_DS1307_rblockPVhh>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(volatile uint8_t Data[], uint8_t len ){ 	
 152:	dc 01       	movw	r26, r24
	uint8_t i;
	TWCR=TWI_START; // Start--------------------------------------------------------------------
 154:	84 ea       	ldi	r24, 0xA4	; 164
 156:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
 158:	06 b6       	in	r0, 0x36	; 54
 15a:	07 fe       	sbrs	r0, 7
 15c:	fd cf       	rjmp	.-6      	; 0x158 <_Z17TWI_DS1307_rblockPVhh+0x6>
 15e:	81 b1       	in	r24, 0x01	; 1
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	c9 f7       	brne	.-14     	; 0x158 <_Z17TWI_DS1307_rblockPVhh+0x6>
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
 166:	81 ed       	ldi	r24, 0xD1	; 209
 168:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
 16e:	06 b6       	in	r0, 0x36	; 54
 170:	07 fe       	sbrs	r0, 7
 172:	fd cf       	rjmp	.-6      	; 0x16e <_Z17TWI_DS1307_rblockPVhh+0x1c>
 174:	81 b1       	in	r24, 0x01	; 1
 176:	88 7f       	andi	r24, 0xF8	; 248
 178:	80 34       	cpi	r24, 0x40	; 64
 17a:	c9 f7       	brne	.-14     	; 0x16e <_Z17TWI_DS1307_rblockPVhh+0x1c>
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
 17c:	46 2f       	mov	r20, r22
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	41 50       	subi	r20, 0x01	; 1
 182:	51 09       	sbc	r21, r1
 184:	14 16       	cp	r1, r20
 186:	15 06       	cpc	r1, r21
 188:	ac f4       	brge	.+42     	; 0x1b4 <_Z17TWI_DS1307_rblockPVhh+0x62>
 18a:	90 e0       	ldi	r25, 0x00	; 0
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
 18c:	84 ec       	ldi	r24, 0xC4	; 196
 18e:	86 bf       	out	0x36, r24	; 54
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
 190:	06 b6       	in	r0, 0x36	; 54
 192:	07 fe       	sbrs	r0, 7
 194:	fd cf       	rjmp	.-6      	; 0x190 <_Z17TWI_DS1307_rblockPVhh+0x3e>
 196:	21 b1       	in	r18, 0x01	; 1
 198:	28 7f       	andi	r18, 0xF8	; 248
 19a:	20 35       	cpi	r18, 0x50	; 80
 19c:	c9 f7       	brne	.-14     	; 0x190 <_Z17TWI_DS1307_rblockPVhh+0x3e>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
 19e:	fd 01       	movw	r30, r26
 1a0:	e9 0f       	add	r30, r25
 1a2:	f1 1d       	adc	r31, r1
 1a4:	23 b1       	in	r18, 0x03	; 3
 1a6:	20 83       	st	Z, r18
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
 1a8:	9f 5f       	subi	r25, 0xFF	; 255
 1aa:	29 2f       	mov	r18, r25
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	24 17       	cp	r18, r20
 1b0:	35 07       	cpc	r19, r21
 1b2:	6c f3       	brlt	.-38     	; 0x18e <_Z17TWI_DS1307_rblockPVhh+0x3c>
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
 1b4:	84 e8       	ldi	r24, 0x84	; 132
 1b6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
 1b8:	06 b6       	in	r0, 0x36	; 54
 1ba:	07 fe       	sbrs	r0, 7
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <_Z17TWI_DS1307_rblockPVhh+0x66>
 1be:	81 b1       	in	r24, 0x01	; 1
 1c0:	88 7f       	andi	r24, 0xF8	; 248
 1c2:	88 35       	cpi	r24, 0x58	; 88
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <_Z17TWI_DS1307_rblockPVhh+0x66>
	Data[len-1]=TWDR;
 1c6:	86 2f       	mov	r24, r22
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	a8 0f       	add	r26, r24
 1ce:	b9 1f       	adc	r27, r25
 1d0:	83 b1       	in	r24, 0x03	; 3
 1d2:	8c 93       	st	X, r24
	
	TWCR=TWI_STOP;											 //STOP condition
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	86 bf       	out	0x36, r24	; 54
	return 0;	
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

000001dc <_Z7BCD2Dech>:
uint8_t length = 7;
uint8_t BCD2Dec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
	H=(BCD>>4)*10;
	return (H+L);
 1dc:	98 2f       	mov	r25, r24
 1de:	96 95       	lsr	r25
 1e0:	96 95       	lsr	r25
 1e2:	96 95       	lsr	r25
 1e4:	9e 71       	andi	r25, 0x1E	; 30
 1e6:	29 2f       	mov	r18, r25
 1e8:	22 0f       	add	r18, r18
 1ea:	22 0f       	add	r18, r18
 1ec:	92 0f       	add	r25, r18
 1ee:	8f 70       	andi	r24, 0x0F	; 15
}
 1f0:	89 0f       	add	r24, r25
 1f2:	08 95       	ret

000001f4 <_Z7Dec2BCDh>:

uint8_t Dec2BCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
	H=(Dec/10)<<4;
	return (H+L);
 1f4:	9d ec       	ldi	r25, 0xCD	; 205
 1f6:	89 9f       	mul	r24, r25
 1f8:	91 2d       	mov	r25, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	96 95       	lsr	r25
 1fe:	96 95       	lsr	r25
 200:	96 95       	lsr	r25
 202:	39 2f       	mov	r19, r25
 204:	33 0f       	add	r19, r19
 206:	23 2f       	mov	r18, r19
 208:	22 0f       	add	r18, r18
 20a:	22 0f       	add	r18, r18
 20c:	23 0f       	add	r18, r19
 20e:	82 1b       	sub	r24, r18
}
 210:	20 e1       	ldi	r18, 0x10	; 16
 212:	92 9f       	mul	r25, r18
 214:	80 0d       	add	r24, r0
 216:	11 24       	eor	r1, r1
 218:	08 95       	ret

0000021a <main>:


int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	81 bb       	out	0x11, r24	; 17
	 tData[0]=Dec2BCD(Second);
 21e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Second>
 222:	e8 df       	rcall	.-48     	; 0x1f4 <_Z7Dec2BCDh>
 224:	ca e6       	ldi	r28, 0x6A	; 106
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	88 83       	st	Y, r24
	 tData[1]=Dec2BCD(Minute);
 22a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Minute>
 22e:	e2 df       	rcall	.-60     	; 0x1f4 <_Z7Dec2BCDh>
 230:	89 83       	std	Y+1, r24	; 0x01
	 if (Mode!=0) tData[2]=Dec2BCD(Hour)|(Mode<<6)|(AP<<5); //mode 12h
 232:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Mode>
 236:	88 23       	and	r24, r24
 238:	a1 f0       	breq	.+40     	; 0x262 <main+0x48>
 23a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Hour>
 23e:	da df       	rcall	.-76     	; 0x1f4 <_Z7Dec2BCDh>
 240:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Mode>
 244:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <AP>
 248:	30 e4       	ldi	r19, 0x40	; 64
 24a:	23 9f       	mul	r18, r19
 24c:	a0 01       	movw	r20, r0
 24e:	11 24       	eor	r1, r1
 250:	60 e2       	ldi	r22, 0x20	; 32
 252:	96 9f       	mul	r25, r22
 254:	90 01       	movw	r18, r0
 256:	11 24       	eor	r1, r1
 258:	24 2b       	or	r18, r20
 25a:	82 2b       	or	r24, r18
 25c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end+0x2>
 260:	05 c0       	rjmp	.+10     	; 0x26c <main+0x52>
	 else tData[2]=Dec2BCD(Hour);
 262:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Hour>
 266:	c6 df       	rcall	.-116    	; 0x1f4 <_Z7Dec2BCDh>
 268:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end+0x2>
	 tData[3]=Dec2BCD(Day);
 26c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Day>
 270:	c1 df       	rcall	.-126    	; 0x1f4 <_Z7Dec2BCDh>
 272:	ca e6       	ldi	r28, 0x6A	; 106
 274:	d0 e0       	ldi	r29, 0x00	; 0
 276:	8b 83       	std	Y+3, r24	; 0x03
	 tData[4]=Dec2BCD(Date);
 278:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Date>
 27c:	bb df       	rcall	.-138    	; 0x1f4 <_Z7Dec2BCDh>
 27e:	8c 83       	std	Y+4, r24	; 0x04
	 tData[5]=Dec2BCD(Month);
 280:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Month>
 284:	b7 df       	rcall	.-146    	; 0x1f4 <_Z7Dec2BCDh>
 286:	8d 83       	std	Y+5, r24	; 0x05
	 tData[6]=Dec2BCD(Year);
 288:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Year>
 28c:	b3 df       	rcall	.-154    	; 0x1f4 <_Z7Dec2BCDh>
 28e:	8e 83       	std	Y+6, r24	; 0x06
	 TWI_Init();
 290:	e6 de       	rcall	.-564    	; 0x5e <_Z8TWI_Initv>
	 TWI_DS1307_wblock(0x00,tData,length);
 292:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 296:	be 01       	movw	r22, r28
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0f df       	rcall	.-482    	; 0xba <_Z17TWI_DS1307_wblockhPVhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	83 ec       	ldi	r24, 0xC3	; 195
 29e:	99 e0       	ldi	r25, 0x09	; 9
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x86>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x8c>
 2a6:	00 00       	nop
	 _delay_ms(10);
	 TWI_DS1307_wadr(0x00);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	df de       	rcall	.-578    	; 0x6a <_Z15TWI_DS1307_wadrh>
 2ac:	83 ec       	ldi	r24, 0xC3	; 195
 2ae:	99 e0       	ldi	r25, 0x09	; 9
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x96>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x9c>
 2b6:	00 00       	nop
	 _delay_ms(10);
	 TWI_DS1307_rblock(tData,length);
 2b8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 2bc:	ce 01       	movw	r24, r28
 2be:	49 df       	rcall	.-366    	; 0x152 <_Z17TWI_DS1307_rblockPVhh>
	 Date   	= BCD2Dec(tData[4]);
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	8c df       	rcall	.-232    	; 0x1dc <_Z7BCD2Dech>
 2c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Date>
	 if(Date == 15)
 2c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Date>
 2cc:	8f 30       	cpi	r24, 0x0F	; 15
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <main+0xba>
		PORTD = 0xFF;
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	82 bb       	out	0x12, r24	; 18
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <main+0xba>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
